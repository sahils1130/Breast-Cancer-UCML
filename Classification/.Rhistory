dataset = read.csv('breast_cancer.csv')
View(dataset)
x = dataset[,-1]
View(x)
View(x)
x = dataset[,1:10]
y = dataset[,11]
y
dataset = dataset[,2:11]
library(caTools)
set.seed(123)
split = sample.split(dataset$Class, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
training_set[1:10] = scale(training_set[1:10])
test_set[1:10] = scale(test_set[1:10])
classifier = glm(formula = Class ~ .,
family = binomial,
data = training_set)
summary(dataset)
dataset$Class = factor(dataset$Class,
levels = c('2', '4'),
labels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Class, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#Feature Scaling
training_set[1:10] = scale(training_set[1:10])
test_set[1:10] = scale(test_set[1:10])
rm(list = ls())
dataset = read.csv('breast_cancer.csv')
dataset = dataset[,2:11]
help('numeric')
dataset$Class = numeric(dataset$Class,
as.numeric(2,4),
is.numeric(0,1))
dataset$Class = factor(dataset$Class,
levels = c(2,4),
labels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Class, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[1:10] = scale(training_set[1:10])
test_set[1:10] = scale(test_set[1:10])
View(training_set)
training_set[1:9] = scale(training_set[1:9])
test_set[1:9] = scale(test_set[1:9])
View(training_set)
classifier = glm(formula = Class ~ .,
family = binomial,
data = training_set)
View(classifier)
prob_pred = predict(classifier, type = 'response', newdata = test_set[10])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
prob_pred = predict(classifier, type = 'response', newdata = test_set[1:9])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
cf = table(test_set[10], y_pred)
y_pred
test_set[10]
cf = table(test_set[,10], y_pred)
cf
n = sum(cf)
n
nc = nrow(cf)
nc
diag = diag(cf)
rowsums = apply(cf, 1, sum)
colsums = apply(cf, 2, sum)
diag
accuracy = sum(diag)/n
accuracy
accuracy = (sum(diag)/n)*100
accuracy
accuracy + '%'
install.packages('caret')
help(trainControl)
library(caret)
train_control = trainControl(method = "cv", number = 10)
Kfold = train(Class ~ .,
data = training_set,
trControl = train_control,
method = "glm",
family = binomial())
install.packages("e1071")
Kfold = train(Class ~ .,
data = training_set,
trControl = train_control,
method = "glm",
family = binomial())
source('~/GitHub/Breast-Cancer-UCML/Classification/BreastCancer.R', echo=TRUE)
install.packages("caret")
summary(Kfold)
summary(classifier)
summary(classifier)
Kfold = train(Class ~ .,
data = classifier,
trControl = train_control,
method = "glm",
family = binomial())
foldpred = predict(Kfold, type = 'response', newdata = test_set[1:9])
fold_pred = ifelse(fold_pred > 0.5,1,0)
foldpred = predict(Kfold, newdata = test_set[1:9])
fold_pred = ifelse(fold_pred > 0.5,1,0)
fold_pred = ifelse(foldpred > 0.5,1,0)
foldpred
table(test_set[,10], foldpred)
kfoldcf = table(test_set[,10], foldpred)
n = sum(kfoldcf)
diag = diag(kfoldcf)
accuracy = (sum(diag)/n)*100
n = sum(kfoldcf)
diag = diag(kfoldcf)
kfoldaccuracy = (sum(diag)/n)*100
kfoldaccuracy
accuracy = (sum(diag)/n)*100
accuracy
cf = table(test_set[,10], y_pred)
n = sum(cf)
diag = diag(cf)
accuracy = (sum(diag)/n)*100
kfoldcf = table(test_set[,10], foldpred)
n2 = sum(kfoldcf)
diag2 = diag(kfoldcf)
kfoldaccuracy = (sum(diag2)/n2)*100
kfoldaccuracy
accuracy
train_control = trainControl(method = "cv", number = 50)
Kfold = train(Class ~ .,
data = training_set,
trControl = train_control,
method = "glm",
family = binomial())
foldpred = predict(Kfold, newdata = test_set[1:9])
kfoldcf = table(test_set[,10], foldpred)
n2 = sum(kfoldcf)
diag2 = diag(kfoldcf)
kfoldaccuracy = (sum(diag2)/n2)*100
kfoldaccuracy
train_control = trainControl(method = "cv", number = 100)
Kfold = train(Class ~ .,
data = training_set,
trControl = train_control,
method = "glm",
family = binomial())
foldpred = predict(Kfold, newdata = test_set[1:9])
kfoldcf = table(test_set[,10], foldpred)
n2 = sum(kfoldcf)
diag2 = diag(kfoldcf)
kfoldaccuracy = (sum(diag2)/n2)*100
kfoldaccuracy
train_control = trainControl(method = "cv", number = 10000)
Kfold = train(Class ~ .,
data = training_set,
trControl = train_control,
method = "glm",
family = binomial())
foldpred = predict(Kfold, newdata = test_set[1:9])
kfoldcf = table(test_set[,10], foldpred)
n2 = sum(kfoldcf)
diag2 = diag(kfoldcf)
kfoldaccuracy = (sum(diag2)/n2)*100
kfoldaccuracy
train_control = trainControl(method = "cv", number = 1)
Kfold = train(Class ~ .,
data = training_set,
trControl = train_control,
method = "glm",
family = binomial())
foldpred = predict(Kfold, newdata = test_set[1:9])
kfoldcf = table(test_set[,10], foldpred)
n2 = sum(kfoldcf)
diag2 = diag(kfoldcf)
kfoldaccuracy = (sum(diag2)/n2)*100
kfoldaccuracy
